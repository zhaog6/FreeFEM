/***********************************************************************
	> File Name: poisson-3d-PETSc.edp
	> Author: Zhao Gang
	> Mail: zhaog6@lsec.cc.ac.cn
	> Created Time: 09/07/2020 Monday 08:33:43 PM
 ***********************************************************************/

macro dimension() 3 //

load "PETSc"

include "macro_ddm.idp"
include "Operator.idp"

verbosity = 0;

macro fe P1 //

real start = mpiWtime();

//-------------------------------
//   Parameters
//-------------------------------
int nn = getARGV("-nn", 16);
int[int] labs = 1 : 6;
int refi = getARGV("-refi", 0);

//-------------------------------
//   Exact Solution
//-------------------------------
func f = 1;

//-------------------------------
//   Building Mesh
//-------------------------------
mpiBarrier(mpiCommWorld);
real cpu = mpiWtime();
meshN Th = cube(nn, nn, nn);
fespace Ph(Th, P0);
Ph part;
if (mpirank == 0) partitionerSeq(part[], Th, mpisize);
partitionerPar(part[], Th, mpiCommWorld, mpisize);
// doing a reverse Cuthill-McKee algorithm on each local mesh to test "reconstructDmesh" (renum=1)
Th = trunc(Th, abs(part-mpirank)<1e-1, split=2^refi, label=-111111, renum=1);
int dNT = Th.nt;
int NT;
mpiAllReduce(dNT, NT, mpiCommWorld, mpiSUM);
reconstructDmesh(Th);
if (mpirank == 0) cout << "Building distributed mesh: " << mpiWtime()-cpu << " s" << endl;

//--------------------------------------
//   Building Finite Element Space
//--------------------------------------
fespace Vh(Th, fe);
Vh uh;

//--------------------------------
//   Defining Variational Form
//--------------------------------
varf vA(u, v) = intN(Th) (grad(u)'*grad(v)) + intN(Th) (f * v) + on(labs, u=0);

//-----------------------------
//   Assembly of Matrices
//-----------------------------
mpiBarrier(mpiCommWorld);
cpu = mpiWtime();
Mat dA;
createMat(Th, dA, fe);
if (mpirank == 0) cout << "Creating dA: " << mpiWtime()-cpu << " s" << endl;
mpiBarrier(mpiCommWorld);
cpu = mpiWtime();
dA = vA(Vh, Vh, tgv=-1);
if (mpirank == 0) cout << "Assembling dA: " << mpiWtime()-cpu << " s" << endl;
mpiBarrier(mpiCommWorld);
cpu = mpiWtime();
real[int] b = vA(0, Vh, tgv=-1);
if (mpirank == 0) cout << "Assembling b: " << mpiWtime()-cpu << " s" << endl;

//-----------------------------
//   Solving Equations
//-----------------------------
Vh Rb[1];
Rb[0] = 1;
set(dA, sparams="-pc_type gamg -ksp_rtol 1e-8 -ksp_converged_reason -ksp_monitor", nearnullspace=Rb);
//set(dA, sparams="-pc_type hypre -pc_hypre_boomeramg_coarsen_type hmis -pc_hypre_boomeramg_interp_type ext+i -pc_hypre_boomeramg_no_CF -pc_hypre_boomeramg_agg_nl 2 -pc_hypre_boomeramg_P_max 4 -ksp_rtol 1e-8 -ksp_converged_reason -ksp_monitor");
//set(dA, sparams = "-pc_type hpddm -pc_hpddm_coarse_p 2 -pc_hpddm_coarse_pc_type gamg -pc_hpddm_coarse_ksp_type bcgs " + "-pc_hpddm_levels_1_eps_nev 20 -pc_hpddm_levels_1_pc_type gamg -pc_hpddm_levels_1_ksp_type bcgs -pc_hpddm_has_neumann -pc_hpddm_define_subdomains " + "-ksp_rtol 1e-8 -ksp_converged_reason -ksp_monitor");
verbosity = 1;
uh[] = dA^-1 * b;
verbosity = 0;

//-----------------------------
//   Computing # of Dofs
//-----------------------------
mpiBarrier(mpiCommWorld);
cpu = mpiWtime();
real[int] puh;
ChangeNumbering(dA, uh[], puh);
real dndofs = puh.n;
real ndofs;
mpiAllReduce(dndofs, ndofs, mpiCommWorld, mpiSUM);
if (mpirank == 0) cout << "Computing nDofs: " << mpiWtime()-cpu << " s" << endl;
if (mpirank == 0)
{
	cout << "----------------------------------" << endl;
	cout << "Th.nt = " << NT << endl;
	cout << "Dofs: "<< ndofs << endl;
	cout << "----------------------------------" << endl;
	cout << "ttttttttttttttttttttttttttttttttttttttttttttt" << endl;
	cout << "Elapsed time is " << mpiWtime()-start << " s" << endl;
	cout << "ttttttttttttttttttttttttttttttttttttttttttttt" << endl;
}
